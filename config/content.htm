<h1>About</h1>
<p>40823124 wcm2024 倉儲網站</p>
<p><a href="https://joyy5f.github.io/wcm2024/content/index.html" target="_blank"><img alt="" height="400" src="/images/Uond.gif" width="600"/></a> </p>
<p><a href="https://github.com/joyy5f/wcm2024" target="_blank">倉儲<img alt="" height="80" src="/images/GitHub_Invertocat_Logo.svg.png" width="80"/></a> </p>
<p><a href="https://joyy5f.github.io/wcm2024/content/index.html">網頁</a></p>
<p><a href="https://joyy5f.github.io/wcm2024/blog/index.html">blog</a></p>
<p><a href="https://joyy5f.github.io/wcm2024/reveal/index.html">簡報</a></p>
<p></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p><h1>Week updated</h1>
<p>每周更新進度與課程內容</p>
<h2>w1</h2>
<h2>w2</h2>
<p>建立個人課程網站步驟:</p>
<ol>
<li>登入 Github</li>
<li>連結到<span> </span><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></li>
<li>利用 "Use this template" 下方的 "Create a new repository" 建立名稱為 wcm2024 的倉儲</li>
<li>在 wcm2024 倉儲上方的 Settings 設定頁面中, 左方 Pages 中的 Branch 分支區域, 選擇將 main 分支存為網頁的 root 根目錄</li>
<li>等 wcm2024 的倉儲 Github Pages 轉檔完成後, 可以看到 commits 提交區的綠色勾勾, 就完成網址為 https://帳號.github.io/wcm2024 的個人課程網站</li>
</ol>
<p>利用上述步驟完成的倉儲內容, 同時帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料.</p>
<p>6.利用 Replit 維護網站<br/>   cmsimde登入密碼為:admin</p>
<h2>w3</h2>
<p>利用github 小組倉儲內的Codespaces開啟線上編譯器，並進行維護。</p>
<p><img alt="" height="272" src="/images/小組網站.png" width="596"/></p>
<p>在replit維護分組倉儲</p>
<p><a href="https://nfuedu-my.sharepoint.com/personal/yen_nfu_edu_tw/_layouts/15/stream.aspx?id=%2Fpersonal%2Fyen%5Fnfu%5Fedu%5Ftw%2FDocuments%2F2024%2Fwcm2024%2Fvideo%2Fwcm2024%5F1a%5Fw3%5F3%5F%E5%A6%82%E4%BD%95%E5%9C%A8%20replit%20%E8%87%AA%E8%A8%AD%20%2Essh%20%E7%B6%AD%E8%AD%B7%E5%88%86%E7%B5%84%E5%80%89%E5%84%B2%2Emp4&amp;nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;ga=1&amp;referrer=StreamWebApp%2EWeb&amp;referrerScenario=AddressBarCopied%2Eview">如何在replit自設.ssh維護分組倉儲</a></p>
<h3>git常用指令</h3>
<p>新增:git add . (點代表新增全部)</p>
<p>提交:git commit -m"說明字串" (m=message)</p>
<p>推送:git push</p>
<p>匯入(部分):git submodule add 、</p>
<p>抓取檔案:git pull = git fetch(遠端抓取) + git merge(更新本機)</p>
<p>複製:git clone、git clone --recurse-submodules</p>
<p>查看當前狀況:git status</p>
<p>版本查看:git version</p>
<p></p>
<h2>w4</h2>
<p>更新分組網站，建立ssh.keys並在分組網站建立名稱為"git"之頁面</p>
<h2>w5</h2>
<p>在頁面中建立STL檢視器</p>
<p></p>
<h2>w6</h2>
<h3>git</h3>
<p></p>
<p></p>
<p><strong>git的發展歷史</strong></p>
<p>根據chatgpt的回答:</p>
<p>Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。以下是 Git 的主要發展歷史：</p>
<ol>
<li>
<p><strong>誕生（2005 年）：</strong></p>
<ul>
<li>Git 最初由 Linus Torvalds 為了管理 Linux 內核開發而創建。</li>
<li>他在 Linux 社群內部使用 BitKeeper 版本控制系統，但當一些爭議發生後，他決定開發一個新的版本控制系統。</li>
</ul>
</li>
<li>
<p><strong>首次公開發布（2005 年）：</strong></p>
<ul>
<li>Git 首次於 2005 年 4 月公開發布。</li>
<li>Git 的首次公開發布引起了開發者社群的興趣，並開始被廣泛使用。</li>
</ul>
</li>
<li>
<p><strong>成為開源項目（2005 年）：</strong></p>
<ul>
<li>在 Git 的早期發展階段，它已經成為一個開源項目。</li>
<li>這使得開發者可以自由使用、修改和分享 Git 的源代碼。</li>
</ul>
</li>
<li>
<p><strong>GitHub 的成立（2008 年）：</strong></p>
<ul>
<li>GitHub 是一個基於 Git 的程式碼托管平台，成立於 2008 年。</li>
<li>GitHub 的出現促進了 Git 的普及，並成為許多開發者協作和管理程式碼的主要平台之一。</li>
</ul>
</li>
<li>
<p><strong>持續發展與更新（2005 年至今）：</strong></p>
<ul>
<li>從誕生至今，Git 在功能和性能上持續進行改進和更新。</li>
<li>Git 社群中有許多貢獻者為其開發新功能、修復問題和改進性能。</li>
</ul>
</li>
<li>
<p><strong>成為行業標準（至今）：</strong></p>
<ul>
<li>隨著時間的推移，Git 已經成為許多開發團隊和專案的首選版本控制系統之一。</li>
<li>它被廣泛應用於軟件開發、開源項目、企業開發等各個領域。</li>
</ul>
</li>
</ol>
<p></p>
<p><strong>git創辦人的相關履歷</strong></p>
<p>根據chatgpt的回答:</p>
<p>Linus Torvalds 是 Git 的創始人之一，他的履歷包含了以下重要的里程碑：</p>
<ol>
<li>
<p><strong>Linux 內核：</strong></p>
<ul>
<li>Linus Torvalds 是 Linux 內核的創始人和主要開發者之一。他於 1991 年開始開發 Linux，並負責協調和管理 Linux 內核的開發工作。</li>
<li>Linux 內核是一個開源的 Unix-like 作業系統核心，被廣泛應用於各種裝置和平台上。</li>
</ul>
</li>
<li>
<p><strong>Git 版本控制系統：</strong></p>
<ul>
<li>在 Linux 開發過程中，Linus Torvalds開始尋找一個更好的版本控制系統，最終於 2005 年創建了 Git。</li>
<li>Git 是一個分散式版本控制系統，廣泛用於程式碼管理和協作，成為了許多開發者和企業的首選工具之一。</li>
</ul>
</li>
<li>
<p><strong>GitHub：</strong></p>
<ul>
<li>隨著 Git 的普及，GitHub 在 2008 年成立，成為了 Git 的主要程式碼托管和協作平台之一。</li>
<li>Linus Torvalds 的 Git 和 GitHub 的結合促進了程式碼開發和協作的革新，對開發者社群產生了深遠的影響。</li>
</ul>
</li>
<li>
<p><strong>開源運動：</strong></p>
<ul>
<li>Linus Torvalds 是開源運動的重要推動者之一，他的工作和貢獻為開源軟件的發展和普及做出了重要貢獻。</li>
<li>他的開源精神和對自由軟件的支持影響了整個科技界，激發了許多人參與到開源社群中來。</li>
</ul>
</li>
<li>
<p><strong>榮譽和獎項：</strong></p>
<ul>
<li>因為他在計算機科學和開源領域的傑出貢獻，Linus Torvalds 獲得了許多榮譽和獎項，包括 ACM 軟件系統獎、Turing 獎等。</li>
</ul>
</li>
</ol>
<p></p>
<p><strong>一般相同專業人士如何利用  git 解決內容管理問題</strong></p>
<p><span>根據chatgpt的回答:</span></p>
<ol>
<li>
<p><strong>版本控制：</strong></p>
<ul>
<li>Git 提供了強大的版本控制功能，允許專業人士追蹤文件的修改歷史、比較不同版本之間的差異、回滾到特定版本等。</li>
<li>專業人士可以使用 Git 來管理文本文件、程式碼、數據集等內容，確保團隊成員之間的協作和溝通。</li>
</ul>
</li>
<li>
<p><strong>協作與共享：</strong></p>
<ul>
<li>Git 可以在分佈式環境下協助團隊成員共同協作開發項目，每個成員都可以在本地進行修改並推送到共享的遠端存儲庫中。</li>
<li>通過 Git，專業人士可以方便地共享代碼、數據、文檔等內容，促進團隊之間的合作和交流。</li>
</ul>
</li>
<li>
<p><strong>分支管理：</strong></p>
<ul>
<li>Git 具有強大的分支管理功能，允許專業人士基於主分支創建新的分支來進行開發工作，並在完成任務後將分支合併回主分支。</li>
<li>這使得專業人士可以同時進行多個任務或功能的開發，而不會影響到主要的開發進程。</li>
</ul>
</li>
<li>
<p><strong>代碼審查：</strong></p>
<ul>
<li>Git 可以與代碼審查工具集成，例如 GitHub 上的 Pull Request 功能，使得團隊成員可以進行代碼審查、提出修改建議等。</li>
<li>這有助於提高代碼質量、減少錯誤和問題，在團隊內部建立更好的合作氛圍。</li>
</ul>
</li>
<li>
<p><strong>持續集成/持續部署（CI/CD）：</strong></p>
<ul>
<li>Git 可以與 CI/CD 工具集成，實現自動化的測試、建構和部署流程。</li>
<li>專業人士可以利用 Git 和 CI/CD 工具來確保代碼的品質、快速部署新功能，提高開發效率和產品交付速度。</li>
</ul>
</li>
</ol>
<h3>在 Windows demo git client 與 git server</h3>
<p>在 y:\tmp 建立 gitproject\repository 與 gitserver\repository </p>
<p>在 y:\tmp\gitproject&gt; git config --global init.defaultBranch main</p>
<p>進入 gitproject\repository 目錄, 新增一個目錄名稱為 repo1, 進入 repo1 執行 git init</p>
<p>進入 gitserver\repository 目錄, 新增一個目錄名稱為 repo1, 進入 repo1 執行 git init --bare 建立裸倉儲</p>
<p>在 y:\tmp\gitproject\repo1 目錄操作, 建立 README.md</p>
<p><span>&gt;:</span>echo "Hello, World!" &gt; README.md</p>
<p>&gt;:git add README.md</p>
<p><span>&gt;:</span>git commit -m "Initial commit"</p>
<p><span>&gt;:</span>git remote add origin y:\tmp\gitserver\repository\repo1</p>
<p><span>&gt;:</span>git push -u origin main</p>
<p><span>在 C:\tmp\repository&gt; git clone Y:\tmp\gitserver\repository\repo1</span></p>
<p><span></span></p>
<p></p><h3>chatgpt解釋git init --bare:</h3>
<p>git init --bare 是一個 Git 命令，用於初始化一個裸存儲庫（bare repository）。裸存儲庫是一個不包含工作目錄的 Git 存儲庫，它僅包含版本控制所需的數據，例如提交歷史、分支、標籤等，而不包含實際的文件內容。</p>
<p>裸存儲庫通常用於共享代碼的中央存儲庫（central repository），多個開發者可以從這個裸存儲庫克隆（clone）代碼到本地進行開發，然後將修改推送（push）回裸存儲庫，以便其他開發者可以同步這些修改。</p>
<p>以下是 git init --bare 的一些關鍵特點和用法解釋：</p>
<p>不包含工作目錄：</p>
<p>裸存儲庫不像普通的 Git 存儲庫那樣包含工作目錄，因此無法在裸存儲庫中查看或編輯文件內容。<br/>這使得裸存儲庫更適合用作共享和同步代碼的中央存儲庫，而不是用於開發或編輯文件。<br/>適用於中央存儲庫：</p>
<p>裸存儲庫通常用於作為中央存儲庫，多個開發者可以從中克隆代碼進行開發，然後將修改推送回中央存儲庫。<br/>這種模式有助於保持代碼的一致性、協作效率和版本控制。<br/>命令語法：</p>
<p>git init --bare 命令中的 --bare 選項告訴 Git 初始化一個裸存儲庫，而不是普通的存儲庫。<br/>命令的完整形式為：git init --bare &lt;repository_path&gt;，其中 &lt;repository_path&gt; 是存儲庫的路徑。</p>
<p></p><h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>