var tipuesearch = {"pages": [{'title': 'About', 'text': '40823124 wcm2024 倉儲網站 \n \xa0 \n 倉儲 \xa0 \n 網頁 \n blog \n 簡報 \n \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site', 'tags': '', 'url': 'About.html'}, {'title': 'Week updated', 'text': '每周更新進度與課程內容 \n', 'tags': '', 'url': 'Week updated.html'}, {'title': 'w1', 'text': '', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '建立個人課程網站步驟: \n \n 登入 Github \n 連結到 \xa0 https://github.com/mdecycu/cmsimde_site \n 利用 "Use this template" 下方的 "Create a new repository" 建立名稱為 wcm2024 的倉儲 \n 在 wcm2024 倉儲上方的 Settings 設定頁面中, 左方 Pages 中的 Branch 分支區域, 選擇將 main 分支存為網頁的 root 根目錄 \n 等 wcm2024 的倉儲 Github Pages 轉檔完成後, 可以看到 commits 提交區的綠色勾勾, 就完成網址為 https://帳號.github.io/wcm2024 的個人課程網站 \n \n 利用上述步驟完成的倉儲內容, 同時帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料. \n 6.利用 Replit 維護網站 \xa0 \xa0cmsimde登入密碼為:admin \n', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '利用github 小組倉儲內的Codespaces開啟線上編譯器，並進行維護。 \n \n 在replit維護分組倉儲 \n 如何在replit自設.ssh維護分組倉儲 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'git常用指令', 'text': '新增:git add . (點代表新增全部) \n 提交:git commit -m"說明字串" (m=message) \n 推送:git push \n 匯入(部分):git submodule add 、 \n 抓取檔案:git pull = git fetch(遠端抓取) + git merge(更新本機) \n 複製:git clone、git clone --recurse-submodules \n 查看當前狀況:git status \n 版本查看:git version \n \n', 'tags': '', 'url': 'git常用指令.html'}, {'title': 'w4', 'text': '更新分組網站，建立ssh.keys並在分組網站建立名稱為"git"之頁面 \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '在頁面中建立STL檢視器 \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '', 'tags': '', 'url': 'w6.html'}, {'title': 'git', 'text': '\n \n git的發展歷史 \n 根據chatgpt的回答: \n Git 是由 Linus Torvalds 在 2005 年開始開發的分散式版本控制系統。以下是 Git 的主要發展歷史： \n \n \n 誕生（2005 年）： \n \n Git 最初由 Linus Torvalds 為了管理 Linux 內核開發而創建。 \n 他在 Linux 社群內部使用 BitKeeper 版本控制系統，但當一些爭議發生後，他決定開發一個新的版本控制系統。 \n \n \n \n 首次公開發布（2005 年）： \n \n Git 首次於 2005 年 4 月公開發布。 \n Git 的首次公開發布引起了開發者社群的興趣，並開始被廣泛使用。 \n \n \n \n 成為開源項目（2005 年）： \n \n 在 Git 的早期發展階段，它已經成為一個開源項目。 \n 這使得開發者可以自由使用、修改和分享 Git 的源代碼。 \n \n \n \n GitHub 的成立（2008 年）： \n \n GitHub 是一個基於 Git 的程式碼托管平台，成立於 2008 年。 \n GitHub 的出現促進了 Git 的普及，並成為許多開發者協作和管理程式碼的主要平台之一。 \n \n \n \n 持續發展與更新（2005 年至今）： \n \n 從誕生至今，Git 在功能和性能上持續進行改進和更新。 \n Git 社群中有許多貢獻者為其開發新功能、修復問題和改進性能。 \n \n \n \n 成為行業標準（至今）： \n \n 隨著時間的推移，Git 已經成為許多開發團隊和專案的首選版本控制系統之一。 \n 它被廣泛應用於軟件開發、開源項目、企業開發等各個領域。 \n \n \n \n \n git創辦人的相關履歷 \n 根據chatgpt的回答: \n Linus Torvalds 是 Git 的創始人之一，他的履歷包含了以下重要的里程碑： \n \n \n Linux 內核： \n \n Linus Torvalds 是 Linux 內核的創始人和主要開發者之一。他於 1991 年開始開發 Linux，並負責協調和管理 Linux 內核的開發工作。 \n Linux 內核是一個開源的 Unix-like 作業系統核心，被廣泛應用於各種裝置和平台上。 \n \n \n \n Git 版本控制系統： \n \n 在 Linux 開發過程中，Linus Torvalds開始尋找一個更好的版本控制系統，最終於 2005 年創建了 Git。 \n Git 是一個分散式版本控制系統，廣泛用於程式碼管理和協作，成為了許多開發者和企業的首選工具之一。 \n \n \n \n GitHub： \n \n 隨著 Git 的普及，GitHub 在 2008 年成立，成為了 Git 的主要程式碼托管和協作平台之一。 \n Linus Torvalds 的 Git 和 GitHub 的結合促進了程式碼開發和協作的革新，對開發者社群產生了深遠的影響。 \n \n \n \n 開源運動： \n \n Linus Torvalds 是開源運動的重要推動者之一，他的工作和貢獻為開源軟件的發展和普及做出了重要貢獻。 \n 他的開源精神和對自由軟件的支持影響了整個科技界，激發了許多人參與到開源社群中來。 \n \n \n \n 榮譽和獎項： \n \n 因為他在計算機科學和開源領域的傑出貢獻，Linus Torvalds 獲得了許多榮譽和獎項，包括 ACM 軟件系統獎、Turing 獎等。 \n \n \n \n \n 一般相同專業人士如何利用\xa0 git 解決內容管理問題 \n 根據chatgpt的回答: \n \n \n 版本控制： \n \n Git 提供了強大的版本控制功能，允許專業人士追蹤文件的修改歷史、比較不同版本之間的差異、回滾到特定版本等。 \n 專業人士可以使用 Git 來管理文本文件、程式碼、數據集等內容，確保團隊成員之間的協作和溝通。 \n \n \n \n 協作與共享： \n \n Git 可以在分佈式環境下協助團隊成員共同協作開發項目，每個成員都可以在本地進行修改並推送到共享的遠端存儲庫中。 \n 通過 Git，專業人士可以方便地共享代碼、數據、文檔等內容，促進團隊之間的合作和交流。 \n \n \n \n 分支管理： \n \n Git 具有強大的分支管理功能，允許專業人士基於主分支創建新的分支來進行開發工作，並在完成任務後將分支合併回主分支。 \n 這使得專業人士可以同時進行多個任務或功能的開發，而不會影響到主要的開發進程。 \n \n \n \n 代碼審查： \n \n Git 可以與代碼審查工具集成，例如 GitHub 上的 Pull Request 功能，使得團隊成員可以進行代碼審查、提出修改建議等。 \n 這有助於提高代碼質量、減少錯誤和問題，在團隊內部建立更好的合作氛圍。 \n \n \n \n 持續集成/持續部署（CI/CD）： \n \n Git 可以與 CI/CD 工具集成，實現自動化的測試、建構和部署流程。 \n 專業人士可以利用 Git 和 CI/CD 工具來確保代碼的品質、快速部署新功能，提高開發效率和產品交付速度。 \n \n \n \n', 'tags': '', 'url': 'git.html'}, {'title': '在 Windows demo git client 與 git server', 'text': '在 y:\\tmp 建立 gitproject\\repository 與 gitserver\\repository\xa0 \n 在 y:\\tmp\\gitproject> git config --global init.defaultBranch main \n 進入 gitproject\\repository 目錄, 新增一個目錄名稱為 repo1, 進入 repo1 執行 git init \n 進入 gitserver\\repository 目錄, 新增一個目錄名稱為 repo1, 進入 repo1 執行 git init --bare 建立裸倉儲 \n 在 y:\\tmp\\gitproject\\repo1 目錄操作, 建立 README.md \n >: echo "Hello, World!" > README.md \n >:git add README.md \n >: git commit -m "Initial commit" \n >: git remote add origin y:\\tmp\\gitserver\\repository\\repo1 \n >: git push -u origin main \n 在 C:\\tmp\\repository> git clone Y:\\tmp\\gitserver\\repository\\repo1 \n \n', 'tags': '', 'url': '在 Windows demo git client 與 git server.html'}, {'title': 'chatgpt解釋git init --bare:', 'text': 'git init --bare 是一個 Git 命令，用於初始化一個裸存儲庫（bare repository）。裸存儲庫是一個不包含工作目錄的 Git 存儲庫，它僅包含版本控制所需的數據，例如提交歷史、分支、標籤等，而不包含實際的文件內容。 \n 裸存儲庫通常用於共享代碼的中央存儲庫（central repository），多個開發者可以從這個裸存儲庫克隆（clone）代碼到本地進行開發，然後將修改推送（push）回裸存儲庫，以便其他開發者可以同步這些修改。 \n 以下是 git init --bare 的一些關鍵特點和用法解釋： \n 不包含工作目錄： \n 裸存儲庫不像普通的 Git 存儲庫那樣包含工作目錄，因此無法在裸存儲庫中查看或編輯文件內容。 這使得裸存儲庫更適合用作共享和同步代碼的中央存儲庫，而不是用於開發或編輯文件。 適用於中央存儲庫： \n 裸存儲庫通常用於作為中央存儲庫，多個開發者可以從中克隆代碼進行開發，然後將修改推送回中央存儲庫。 這種模式有助於保持代碼的一致性、協作效率和版本控制。 命令語法： \n git init --bare 命令中的 --bare 選項告訴 Git 初始化一個裸存儲庫，而不是普通的存儲庫。 命令的完整形式為：git init --bare <repository_path>，其中 <repository_path> 是存儲庫的路徑。 \n', 'tags': '', 'url': 'chatgpt解釋git init --bare:.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};